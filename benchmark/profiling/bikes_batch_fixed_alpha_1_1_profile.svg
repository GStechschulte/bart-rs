<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1850" onload="init(evt)" viewBox="0 0 1200 1850" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1850" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o bikes_batch_fixed_alpha_1_1_profile.svg -- python benchmark/examples/bart_examples.py --model bikes --batch 1.0 1.0</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1839.00"> </text><svg id="frames" x="10" width="1180" total_samples="14157"><g><title>__subclasscheck__ (&lt;frozen abc&gt;:123) (15 samples, 0.11%)</title><rect x="0.1766%" y="548" width="0.1060%" height="15" fill="rgb(227,0,7)" fg:x="25" fg:w="15"/><text x="0.4266%" y="558.50"></text></g><g><title>__subclasscheck__ (&lt;frozen abc&gt;:123) (15 samples, 0.11%)</title><rect x="0.1766%" y="564" width="0.1060%" height="15" fill="rgb(217,0,24)" fg:x="25" fg:w="15"/><text x="0.4266%" y="574.50"></text></g><g><title>__subclasscheck__ (&lt;frozen abc&gt;:123) (15 samples, 0.11%)</title><rect x="0.1766%" y="580" width="0.1060%" height="15" fill="rgb(221,193,54)" fg:x="25" fg:w="15"/><text x="0.4266%" y="590.50"></text></g><g><title>process_node (pytensor/graph/rewriting/basic.py:1913) (18 samples, 0.13%)</title><rect x="0.1695%" y="324" width="0.1271%" height="15" fill="rgb(248,212,6)" fg:x="24" fg:w="18"/><text x="0.4195%" y="334.50"></text></g><g><title>transform (pytensor/graph/rewriting/basic.py:1626) (17 samples, 0.12%)</title><rect x="0.1766%" y="340" width="0.1201%" height="15" fill="rgb(208,68,35)" fg:x="25" fg:w="17"/><text x="0.4266%" y="350.50"></text></g><g><title>__call__ (multipledispatch/dispatcher.py:279) (17 samples, 0.12%)</title><rect x="0.1766%" y="356" width="0.1201%" height="15" fill="rgb(232,128,0)" fg:x="25" fg:w="17"/><text x="0.4266%" y="366.50"></text></g><g><title>unify_NoMap (unification/core.py:254) (17 samples, 0.12%)</title><rect x="0.1766%" y="372" width="0.1201%" height="15" fill="rgb(207,160,47)" fg:x="25" fg:w="17"/><text x="0.4266%" y="382.50"></text></g><g><title>__call__ (multipledispatch/dispatcher.py:279) (17 samples, 0.12%)</title><rect x="0.1766%" y="388" width="0.1201%" height="15" fill="rgb(228,23,34)" fg:x="25" fg:w="17"/><text x="0.4266%" y="398.50"></text></g><g><title>unify (unification/core.py:249) (17 samples, 0.12%)</title><rect x="0.1766%" y="404" width="0.1201%" height="15" fill="rgb(218,30,26)" fg:x="25" fg:w="17"/><text x="0.4266%" y="414.50"></text></g><g><title>__call__ (multipledispatch/dispatcher.py:271) (17 samples, 0.12%)</title><rect x="0.1766%" y="420" width="0.1201%" height="15" fill="rgb(220,122,19)" fg:x="25" fg:w="17"/><text x="0.4266%" y="430.50"></text></g><g><title>dispatch (multipledispatch/dispatcher.py:330) (17 samples, 0.12%)</title><rect x="0.1766%" y="436" width="0.1201%" height="15" fill="rgb(250,228,42)" fg:x="25" fg:w="17"/><text x="0.4266%" y="446.50"></text></g><g><title>dispatch_iter (multipledispatch/dispatcher.py:336) (17 samples, 0.12%)</title><rect x="0.1766%" y="452" width="0.1201%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="17"/><text x="0.4266%" y="462.50"></text></g><g><title>ordering (multipledispatch/dispatcher.py:257) (17 samples, 0.12%)</title><rect x="0.1766%" y="468" width="0.1201%" height="15" fill="rgb(216,20,37)" fg:x="25" fg:w="17"/><text x="0.4266%" y="478.50"></text></g><g><title>reorder (multipledispatch/dispatcher.py:260) (17 samples, 0.12%)</title><rect x="0.1766%" y="484" width="0.1201%" height="15" fill="rgb(206,188,39)" fg:x="25" fg:w="17"/><text x="0.4266%" y="494.50"></text></g><g><title>ordering (multipledispatch/conflict.py:115) (17 samples, 0.12%)</title><rect x="0.1766%" y="500" width="0.1201%" height="15" fill="rgb(217,207,13)" fg:x="25" fg:w="17"/><text x="0.4266%" y="510.50"></text></g><g><title>edge (multipledispatch/conflict.py:104) (17 samples, 0.12%)</title><rect x="0.1766%" y="516" width="0.1201%" height="15" fill="rgb(231,73,38)" fg:x="25" fg:w="17"/><text x="0.4266%" y="526.50"></text></g><g><title>supercedes (multipledispatch/conflict.py:15) (17 samples, 0.12%)</title><rect x="0.1766%" y="532" width="0.1201%" height="15" fill="rgb(225,20,46)" fg:x="25" fg:w="17"/><text x="0.4266%" y="542.50"></text></g><g><title>apply (pytensor/graph/rewriting/basic.py:2418) (19 samples, 0.13%)</title><rect x="0.1695%" y="308" width="0.1342%" height="15" fill="rgb(210,31,41)" fg:x="24" fg:w="19"/><text x="0.4195%" y="318.50"></text></g><g><title>orig_function (pytensor/compile/function/types.py:1757) (34 samples, 0.24%)</title><rect x="0.1554%" y="212" width="0.2402%" height="15" fill="rgb(221,200,47)" fg:x="22" fg:w="34"/><text x="0.4054%" y="222.50"></text></g><g><title>__init__ (pytensor/compile/function/types.py:1526) (34 samples, 0.24%)</title><rect x="0.1554%" y="228" width="0.2402%" height="15" fill="rgb(226,26,5)" fg:x="22" fg:w="34"/><text x="0.4054%" y="238.50"></text></g><g><title>prepare_fgraph (pytensor/compile/function/types.py:1414) (34 samples, 0.24%)</title><rect x="0.1554%" y="244" width="0.2402%" height="15" fill="rgb(249,33,26)" fg:x="22" fg:w="34"/><text x="0.4054%" y="254.50"></text></g><g><title>__call__ (pytensor/graph/rewriting/basic.py:125) (34 samples, 0.24%)</title><rect x="0.1554%" y="260" width="0.2402%" height="15" fill="rgb(235,183,28)" fg:x="22" fg:w="34"/><text x="0.4054%" y="270.50"></text></g><g><title>rewrite (pytensor/graph/rewriting/basic.py:121) (33 samples, 0.23%)</title><rect x="0.1625%" y="276" width="0.2331%" height="15" fill="rgb(221,5,38)" fg:x="23" fg:w="33"/><text x="0.4125%" y="286.50"></text></g><g><title>apply (pytensor/graph/rewriting/basic.py:291) (33 samples, 0.23%)</title><rect x="0.1625%" y="292" width="0.2331%" height="15" fill="rgb(247,18,42)" fg:x="23" fg:w="33"/><text x="0.4125%" y="302.50"></text></g><g><title>run_pass (numba/core/typed_passes.py:112) (15 samples, 0.11%)</title><rect x="0.4168%" y="612" width="0.1060%" height="15" fill="rgb(241,131,45)" fg:x="59" fg:w="15"/><text x="0.6668%" y="622.50"></text></g><g><title>type_inference_stage (numba/core/typed_passes.py:93) (15 samples, 0.11%)</title><rect x="0.4168%" y="628" width="0.1060%" height="15" fill="rgb(249,31,29)" fg:x="59" fg:w="15"/><text x="0.6668%" y="638.50"></text></g><g><title>propagate (numba/core/typeinfer.py:1083) (15 samples, 0.11%)</title><rect x="0.4168%" y="644" width="0.1060%" height="15" fill="rgb(225,111,53)" fg:x="59" fg:w="15"/><text x="0.6668%" y="654.50"></text></g><g><title>finalize (numba/core/codegen.py:762) (28 samples, 0.20%)</title><rect x="0.5651%" y="676" width="0.1978%" height="15" fill="rgb(238,160,17)" fg:x="80" fg:w="28"/><text x="0.8151%" y="686.50"></text></g><g><title>_optimize_final_module (numba/core/codegen.py:682) (18 samples, 0.13%)</title><rect x="0.6357%" y="692" width="0.1271%" height="15" fill="rgb(214,148,48)" fg:x="90" fg:w="18"/><text x="0.8857%" y="702.50"></text></g><g><title>run (llvmlite/binding/passmanagers.py:698) (18 samples, 0.13%)</title><rect x="0.6357%" y="708" width="0.1271%" height="15" fill="rgb(232,36,49)" fg:x="90" fg:w="18"/><text x="0.8857%" y="718.50"></text></g><g><title>__call__ (llvmlite/binding/ffi.py:192) (18 samples, 0.13%)</title><rect x="0.6357%" y="724" width="0.1271%" height="15" fill="rgb(209,103,24)" fg:x="90" fg:w="18"/><text x="0.8857%" y="734.50"></text></g><g><title>run_pass (numba/core/typed_passes.py:497) (33 samples, 0.23%)</title><rect x="0.5651%" y="612" width="0.2331%" height="15" fill="rgb(229,88,8)" fg:x="80" fg:w="33"/><text x="0.8151%" y="622.50"></text></g><g><title>get_executable (numba/core/cpu.py:239) (33 samples, 0.23%)</title><rect x="0.5651%" y="628" width="0.2331%" height="15" fill="rgb(213,181,19)" fg:x="80" fg:w="33"/><text x="0.8151%" y="638.50"></text></g><g><title>get_pointer_to_function (numba/core/codegen.py:989) (33 samples, 0.23%)</title><rect x="0.5651%" y="644" width="0.2331%" height="15" fill="rgb(254,191,54)" fg:x="80" fg:w="33"/><text x="0.8151%" y="654.50"></text></g><g><title>_ensure_finalized (numba/core/codegen.py:567) (33 samples, 0.23%)</title><rect x="0.5651%" y="660" width="0.2331%" height="15" fill="rgb(241,83,37)" fg:x="80" fg:w="33"/><text x="0.8151%" y="670.50"></text></g><g><title>numba_funcify_CAReduce (pytensor/link/numba/dispatch/elemwise.py:499) (60 samples, 0.42%)</title><rect x="0.3956%" y="372" width="0.4238%" height="15" fill="rgb(233,36,39)" fg:x="56" fg:w="60"/><text x="0.6456%" y="382.50"></text></g><g><title>jit_compile_reducer (pytensor/link/numba/dispatch/elemwise.py:321) (59 samples, 0.42%)</title><rect x="0.4026%" y="388" width="0.4168%" height="15" fill="rgb(226,3,54)" fg:x="57" fg:w="59"/><text x="0.6526%" y="398.50"></text></g><g><title>wrapper (numba/core/decorators.py:232) (59 samples, 0.42%)</title><rect x="0.4026%" y="404" width="0.4168%" height="15" fill="rgb(245,192,40)" fg:x="57" fg:w="59"/><text x="0.6526%" y="414.50"></text></g><g><title>compile (numba/core/dispatcher.py:905) (59 samples, 0.42%)</title><rect x="0.4026%" y="420" width="0.4168%" height="15" fill="rgb(238,167,29)" fg:x="57" fg:w="59"/><text x="0.6526%" y="430.50"></text></g><g><title>compile (numba/core/dispatcher.py:80) (59 samples, 0.42%)</title><rect x="0.4026%" y="436" width="0.4168%" height="15" fill="rgb(232,182,51)" fg:x="57" fg:w="59"/><text x="0.6526%" y="446.50"></text></g><g><title>_compile_cached (numba/core/dispatcher.py:94) (59 samples, 0.42%)</title><rect x="0.4026%" y="452" width="0.4168%" height="15" fill="rgb(231,60,39)" fg:x="57" fg:w="59"/><text x="0.6526%" y="462.50"></text></g><g><title>_compile_core (numba/core/dispatcher.py:107) (59 samples, 0.42%)</title><rect x="0.4026%" y="468" width="0.4168%" height="15" fill="rgb(208,69,12)" fg:x="57" fg:w="59"/><text x="0.6526%" y="478.50"></text></g><g><title>compile_extra (numba/core/compiler.py:744) (59 samples, 0.42%)</title><rect x="0.4026%" y="484" width="0.4168%" height="15" fill="rgb(235,93,37)" fg:x="57" fg:w="59"/><text x="0.6526%" y="494.50"></text></g><g><title>compile_extra (numba/core/compiler.py:438) (59 samples, 0.42%)</title><rect x="0.4026%" y="500" width="0.4168%" height="15" fill="rgb(213,116,39)" fg:x="57" fg:w="59"/><text x="0.6526%" y="510.50"></text></g><g><title>_compile_bytecode (numba/core/compiler.py:506) (59 samples, 0.42%)</title><rect x="0.4026%" y="516" width="0.4168%" height="15" fill="rgb(222,207,29)" fg:x="57" fg:w="59"/><text x="0.6526%" y="526.50"></text></g><g><title>_compile_core (numba/core/compiler.py:472) (59 samples, 0.42%)</title><rect x="0.4026%" y="532" width="0.4168%" height="15" fill="rgb(206,96,30)" fg:x="57" fg:w="59"/><text x="0.6526%" y="542.50"></text></g><g><title>run (numba/core/compiler_machinery.py:356) (59 samples, 0.42%)</title><rect x="0.4026%" y="548" width="0.4168%" height="15" fill="rgb(218,138,4)" fg:x="57" fg:w="59"/><text x="0.6526%" y="558.50"></text></g><g><title>_acquire_compile_lock (numba/core/compiler_lock.py:35) (59 samples, 0.42%)</title><rect x="0.4026%" y="564" width="0.4168%" height="15" fill="rgb(250,191,14)" fg:x="57" fg:w="59"/><text x="0.6526%" y="574.50"></text></g><g><title>_runPass (numba/core/compiler_machinery.py:311) (57 samples, 0.40%)</title><rect x="0.4168%" y="580" width="0.4026%" height="15" fill="rgb(239,60,40)" fg:x="59" fg:w="57"/><text x="0.6668%" y="590.50"></text></g><g><title>check (numba/core/compiler_machinery.py:273) (57 samples, 0.40%)</title><rect x="0.4168%" y="596" width="0.4026%" height="15" fill="rgb(206,27,48)" fg:x="59" fg:w="57"/><text x="0.6668%" y="606.50"></text></g><g><title>fgraph_convert (pytensor/link/numba/linker.py:10) (82 samples, 0.58%)</title><rect x="0.3956%" y="292" width="0.5792%" height="15" fill="rgb(225,35,8)" fg:x="56" fg:w="82"/><text x="0.6456%" y="302.50"></text></g><g><title>wrapper (functools.py:909) (82 samples, 0.58%)</title><rect x="0.3956%" y="308" width="0.5792%" height="15" fill="rgb(250,213,24)" fg:x="56" fg:w="82"/><text x="0.6456%" y="318.50"></text></g><g><title>numba_funcify_FunctionGraph (pytensor/link/numba/dispatch/basic.py:463) (82 samples, 0.58%)</title><rect x="0.3956%" y="324" width="0.5792%" height="15" fill="rgb(247,123,22)" fg:x="56" fg:w="82"/><text x="0.6456%" y="334.50"></text></g><g><title>fgraph_to_python (pytensor/link/utils.py:736) (82 samples, 0.58%)</title><rect x="0.3956%" y="340" width="0.5792%" height="15" fill="rgb(231,138,38)" fg:x="56" fg:w="82"/><text x="0.6456%" y="350.50"></text></g><g><title>wrapper (functools.py:909) (82 samples, 0.58%)</title><rect x="0.3956%" y="356" width="0.5792%" height="15" fill="rgb(231,145,46)" fg:x="56" fg:w="82"/><text x="0.6456%" y="366.50"></text></g><g><title>numba_funcify_Elemwise (pytensor/link/numba/dispatch/elemwise.py:359) (22 samples, 0.16%)</title><rect x="0.8194%" y="372" width="0.1554%" height="15" fill="rgb(251,118,11)" fg:x="116" fg:w="22"/><text x="1.0694%" y="382.50"></text></g><g><title>wrapper (functools.py:909) (22 samples, 0.16%)</title><rect x="0.8194%" y="388" width="0.1554%" height="15" fill="rgb(217,147,25)" fg:x="116" fg:w="22"/><text x="1.0694%" y="398.50"></text></g><g><title>__init__ (pymc_bart/compile_pymc.py:37) (124 samples, 0.88%)</title><rect x="0.1060%" y="132" width="0.8759%" height="15" fill="rgb(247,81,37)" fg:x="15" fg:w="124"/><text x="0.3560%" y="142.50"></text></g><g><title>_make_functions (pymc_bart/compile_pymc.py:58) (117 samples, 0.83%)</title><rect x="0.1554%" y="148" width="0.8264%" height="15" fill="rgb(209,12,38)" fg:x="22" fg:w="117"/><text x="0.4054%" y="158.50"></text></g><g><title>compile_pymc (pymc/pytensorf.py:1054) (117 samples, 0.83%)</title><rect x="0.1554%" y="164" width="0.8264%" height="15" fill="rgb(227,1,9)" fg:x="22" fg:w="117"/><text x="0.4054%" y="174.50"></text></g><g><title>function (pytensor/compile/function/__init__.py:318) (117 samples, 0.83%)</title><rect x="0.1554%" y="180" width="0.8264%" height="15" fill="rgb(248,47,43)" fg:x="22" fg:w="117"/><text x="0.4054%" y="190.50"></text></g><g><title>pfunc (pytensor/compile/function/pfunc.py:465) (117 samples, 0.83%)</title><rect x="0.1554%" y="196" width="0.8264%" height="15" fill="rgb(221,10,30)" fg:x="22" fg:w="117"/><text x="0.4054%" y="206.50"></text></g><g><title>orig_function (pytensor/compile/function/types.py:1769) (83 samples, 0.59%)</title><rect x="0.3956%" y="212" width="0.5863%" height="15" fill="rgb(210,229,1)" fg:x="56" fg:w="83"/><text x="0.6456%" y="222.50"></text></g><g><title>create (pytensor/compile/function/types.py:1661) (83 samples, 0.59%)</title><rect x="0.3956%" y="228" width="0.5863%" height="15" fill="rgb(222,148,37)" fg:x="56" fg:w="83"/><text x="0.6456%" y="238.50"></text></g><g><title>make_thunk (pytensor/link/basic.py:245) (83 samples, 0.59%)</title><rect x="0.3956%" y="244" width="0.5863%" height="15" fill="rgb(234,67,33)" fg:x="56" fg:w="83"/><text x="0.6456%" y="254.50"></text></g><g><title>make_all (pytensor/link/basic.py:695) (83 samples, 0.59%)</title><rect x="0.3956%" y="260" width="0.5863%" height="15" fill="rgb(247,98,35)" fg:x="56" fg:w="83"/><text x="0.6456%" y="270.50"></text></g><g><title>create_jitable_thunk (pytensor/link/basic.py:647) (83 samples, 0.59%)</title><rect x="0.3956%" y="276" width="0.5863%" height="15" fill="rgb(247,138,52)" fg:x="56" fg:w="83"/><text x="0.6456%" y="286.50"></text></g><g><title>_runPass (numba/core/compiler_machinery.py:311) (15 samples, 0.11%)</title><rect x="1.0101%" y="1188" width="0.1060%" height="15" fill="rgb(213,79,30)" fg:x="143" fg:w="15"/><text x="1.2601%" y="1198.50"></text></g><g><title>check (numba/core/compiler_machinery.py:273) (15 samples, 0.11%)</title><rect x="1.0101%" y="1204" width="0.1060%" height="15" fill="rgb(246,177,23)" fg:x="143" fg:w="15"/><text x="1.2601%" y="1214.50"></text></g><g><title>get_call_type (numba/core/types/functions.py:308) (17 samples, 0.12%)</title><rect x="1.0030%" y="916" width="0.1201%" height="15" fill="rgb(230,62,27)" fg:x="142" fg:w="17"/><text x="1.2530%" y="926.50"></text></g><g><title>apply (numba/core/typing/templates.py:350) (17 samples, 0.12%)</title><rect x="1.0030%" y="932" width="0.1201%" height="15" fill="rgb(216,154,8)" fg:x="142" fg:w="17"/><text x="1.2530%" y="942.50"></text></g><g><title>generic (numba/core/typing/templates.py:613) (17 samples, 0.12%)</title><rect x="1.0030%" y="948" width="0.1201%" height="15" fill="rgb(244,35,45)" fg:x="142" fg:w="17"/><text x="1.2530%" y="958.50"></text></g><g><title>_get_impl (numba/core/typing/templates.py:712) (17 samples, 0.12%)</title><rect x="1.0030%" y="964" width="0.1201%" height="15" fill="rgb(251,115,12)" fg:x="142" fg:w="17"/><text x="1.2530%" y="974.50"></text></g><g><title>_build_impl (numba/core/typing/templates.py:816) (17 samples, 0.12%)</title><rect x="1.0030%" y="980" width="0.1201%" height="15" fill="rgb(240,54,50)" fg:x="142" fg:w="17"/><text x="1.2530%" y="990.50"></text></g><g><title>get_call_type (numba/core/types/functions.py:541) (17 samples, 0.12%)</title><rect x="1.0030%" y="996" width="0.1201%" height="15" fill="rgb(233,84,52)" fg:x="142" fg:w="17"/><text x="1.2530%" y="1006.50"></text></g><g><title>get_call_template (numba/core/dispatcher.py:318) (17 samples, 0.12%)</title><rect x="1.0030%" y="1012" width="0.1201%" height="15" fill="rgb(207,117,47)" fg:x="142" fg:w="17"/><text x="1.2530%" y="1022.50"></text></g><g><title>compile (numba/core/dispatcher.py:905) (17 samples, 0.12%)</title><rect x="1.0030%" y="1028" width="0.1201%" height="15" fill="rgb(249,43,39)" fg:x="142" fg:w="17"/><text x="1.2530%" y="1038.50"></text></g><g><title>compile (numba/core/dispatcher.py:80) (17 samples, 0.12%)</title><rect x="1.0030%" y="1044" width="0.1201%" height="15" fill="rgb(209,38,44)" fg:x="142" fg:w="17"/><text x="1.2530%" y="1054.50"></text></g><g><title>_compile_cached (numba/core/dispatcher.py:94) (17 samples, 0.12%)</title><rect x="1.0030%" y="1060" width="0.1201%" height="15" fill="rgb(236,212,23)" fg:x="142" fg:w="17"/><text x="1.2530%" y="1070.50"></text></g><g><title>_compile_core (numba/core/dispatcher.py:107) (17 samples, 0.12%)</title><rect x="1.0030%" y="1076" width="0.1201%" height="15" fill="rgb(242,79,21)" fg:x="142" fg:w="17"/><text x="1.2530%" y="1086.50"></text></g><g><title>compile_extra (numba/core/compiler.py:744) (17 samples, 0.12%)</title><rect x="1.0030%" y="1092" width="0.1201%" height="15" fill="rgb(211,96,35)" fg:x="142" fg:w="17"/><text x="1.2530%" y="1102.50"></text></g><g><title>compile_extra (numba/core/compiler.py:438) (17 samples, 0.12%)</title><rect x="1.0030%" y="1108" width="0.1201%" height="15" fill="rgb(253,215,40)" fg:x="142" fg:w="17"/><text x="1.2530%" y="1118.50"></text></g><g><title>_compile_bytecode (numba/core/compiler.py:506) (17 samples, 0.12%)</title><rect x="1.0030%" y="1124" width="0.1201%" height="15" fill="rgb(211,81,21)" fg:x="142" fg:w="17"/><text x="1.2530%" y="1134.50"></text></g><g><title>_compile_core (numba/core/compiler.py:472) (17 samples, 0.12%)</title><rect x="1.0030%" y="1140" width="0.1201%" height="15" fill="rgb(208,190,38)" fg:x="142" fg:w="17"/><text x="1.2530%" y="1150.50"></text></g><g><title>run (numba/core/compiler_machinery.py:356) (17 samples, 0.12%)</title><rect x="1.0030%" y="1156" width="0.1201%" height="15" fill="rgb(235,213,38)" fg:x="142" fg:w="17"/><text x="1.2530%" y="1166.50"></text></g><g><title>_acquire_compile_lock (numba/core/compiler_lock.py:35) (17 samples, 0.12%)</title><rect x="1.0030%" y="1172" width="0.1201%" height="15" fill="rgb(237,122,38)" fg:x="142" fg:w="17"/><text x="1.2530%" y="1182.50"></text></g><g><title>array_reshape (numba/np/arrayobj.py:2112) (25 samples, 0.18%)</title><rect x="1.1867%" y="1780" width="0.1766%" height="15" fill="rgb(244,218,35)" fg:x="168" fg:w="25"/><text x="1.4367%" y="1790.50"></text></g><g><title>compile_internal (numba/core/base.py:881) (25 samples, 0.18%)</title><rect x="1.1867%" y="1796" width="0.1766%" height="15" fill="rgb(240,68,47)" fg:x="168" fg:w="25"/><text x="1.4367%" y="1806.50"></text></g><g><title>compile_subroutine (numba/core/base.py:866) (25 samples, 0.18%)</title><rect x="1.1867%" y="1812" width="0.1766%" height="15" fill="rgb(210,16,53)" fg:x="168" fg:w="25"/><text x="1.4367%" y="1822.50"></text></g><g><title>lower (numba/core/lowering.py:187) (31 samples, 0.22%)</title><rect x="1.1655%" y="1604" width="0.2190%" height="15" fill="rgb(235,124,12)" fg:x="165" fg:w="31"/><text x="1.4155%" y="1614.50"></text></g><g><title>lower_normal_function (numba/core/lowering.py:226) (31 samples, 0.22%)</title><rect x="1.1655%" y="1620" width="0.2190%" height="15" fill="rgb(224,169,11)" fg:x="165" fg:w="31"/><text x="1.4155%" y="1630.50"></text></g><g><title>lower_function_body (numba/core/lowering.py:256) (31 samples, 0.22%)</title><rect x="1.1655%" y="1636" width="0.2190%" height="15" fill="rgb(250,166,2)" fg:x="165" fg:w="31"/><text x="1.4155%" y="1646.50"></text></g><g><title>lower_block (numba/core/lowering.py:270) (31 samples, 0.22%)</title><rect x="1.1655%" y="1652" width="0.2190%" height="15" fill="rgb(242,216,29)" fg:x="165" fg:w="31"/><text x="1.4155%" y="1662.50"></text></g><g><title>lower_inst (numba/core/lowering.py:448) (31 samples, 0.22%)</title><rect x="1.1655%" y="1668" width="0.2190%" height="15" fill="rgb(230,116,27)" fg:x="165" fg:w="31"/><text x="1.4155%" y="1678.50"></text></g><g><title>lower_assign (numba/core/lowering.py:660) (31 samples, 0.22%)</title><rect x="1.1655%" y="1684" width="0.2190%" height="15" fill="rgb(228,99,48)" fg:x="165" fg:w="31"/><text x="1.4155%" y="1694.50"></text></g><g><title>lower_expr (numba/core/lowering.py:1196) (31 samples, 0.22%)</title><rect x="1.1655%" y="1700" width="0.2190%" height="15" fill="rgb(253,11,6)" fg:x="165" fg:w="31"/><text x="1.4155%" y="1710.50"></text></g><g><title>lower_call (numba/core/lowering.py:925) (31 samples, 0.22%)</title><rect x="1.1655%" y="1716" width="0.2190%" height="15" fill="rgb(247,143,39)" fg:x="165" fg:w="31"/><text x="1.4155%" y="1726.50"></text></g><g><title>_lower_call_normal (numba/core/lowering.py:1167) (31 samples, 0.22%)</title><rect x="1.1655%" y="1732" width="0.2190%" height="15" fill="rgb(236,97,10)" fg:x="165" fg:w="31"/><text x="1.4155%" y="1742.50"></text></g><g><title>__call__ (numba/core/base.py:1190) (31 samples, 0.22%)</title><rect x="1.1655%" y="1748" width="0.2190%" height="15" fill="rgb(233,208,19)" fg:x="165" fg:w="31"/><text x="1.4155%" y="1758.50"></text></g><g><title>wrapper (numba/core/base.py:1220) (31 samples, 0.22%)</title><rect x="1.1655%" y="1764" width="0.2190%" height="15" fill="rgb(216,164,2)" fg:x="165" fg:w="31"/><text x="1.4155%" y="1774.50"></text></g><g><title>run_pass (numba/core/typed_passes.py:468) (32 samples, 0.23%)</title><rect x="1.1655%" y="1588" width="0.2260%" height="15" fill="rgb(220,129,5)" fg:x="165" fg:w="32"/><text x="1.4155%" y="1598.50"></text></g><g><title>run_pass (numba/core/typed_passes.py:497) (15 samples, 0.11%)</title><rect x="1.3986%" y="1588" width="0.1060%" height="15" fill="rgb(242,17,10)" fg:x="198" fg:w="15"/><text x="1.6486%" y="1598.50"></text></g><g><title>get_executable (numba/core/cpu.py:239) (15 samples, 0.11%)</title><rect x="1.3986%" y="1604" width="0.1060%" height="15" fill="rgb(242,107,0)" fg:x="198" fg:w="15"/><text x="1.6486%" y="1614.50"></text></g><g><title>get_pointer_to_function (numba/core/codegen.py:989) (15 samples, 0.11%)</title><rect x="1.3986%" y="1620" width="0.1060%" height="15" fill="rgb(251,28,31)" fg:x="198" fg:w="15"/><text x="1.6486%" y="1630.50"></text></g><g><title>_ensure_finalized (numba/core/codegen.py:567) (15 samples, 0.11%)</title><rect x="1.3986%" y="1636" width="0.1060%" height="15" fill="rgb(233,223,10)" fg:x="198" fg:w="15"/><text x="1.6486%" y="1646.50"></text></g><g><title>generic (numba/core/typing/templates.py:613) (53 samples, 0.37%)</title><rect x="1.1443%" y="1316" width="0.3744%" height="15" fill="rgb(215,21,27)" fg:x="162" fg:w="53"/><text x="1.3943%" y="1326.50"></text></g><g><title>_get_impl (numba/core/typing/templates.py:712) (53 samples, 0.37%)</title><rect x="1.1443%" y="1332" width="0.3744%" height="15" fill="rgb(232,23,21)" fg:x="162" fg:w="53"/><text x="1.3943%" y="1342.50"></text></g><g><title>_build_impl (numba/core/typing/templates.py:816) (53 samples, 0.37%)</title><rect x="1.1443%" y="1348" width="0.3744%" height="15" fill="rgb(244,5,23)" fg:x="162" fg:w="53"/><text x="1.3943%" y="1358.50"></text></g><g><title>get_call_type (numba/core/types/functions.py:541) (53 samples, 0.37%)</title><rect x="1.1443%" y="1364" width="0.3744%" height="15" fill="rgb(226,81,46)" fg:x="162" fg:w="53"/><text x="1.3943%" y="1374.50"></text></g><g><title>get_call_template (numba/core/dispatcher.py:318) (53 samples, 0.37%)</title><rect x="1.1443%" y="1380" width="0.3744%" height="15" fill="rgb(247,70,30)" fg:x="162" fg:w="53"/><text x="1.3943%" y="1390.50"></text></g><g><title>compile (numba/core/dispatcher.py:905) (52 samples, 0.37%)</title><rect x="1.1514%" y="1396" width="0.3673%" height="15" fill="rgb(212,68,19)" fg:x="163" fg:w="52"/><text x="1.4014%" y="1406.50"></text></g><g><title>compile (numba/core/dispatcher.py:80) (52 samples, 0.37%)</title><rect x="1.1514%" y="1412" width="0.3673%" height="15" fill="rgb(240,187,13)" fg:x="163" fg:w="52"/><text x="1.4014%" y="1422.50"></text></g><g><title>_compile_cached (numba/core/dispatcher.py:94) (52 samples, 0.37%)</title><rect x="1.1514%" y="1428" width="0.3673%" height="15" fill="rgb(223,113,26)" fg:x="163" fg:w="52"/><text x="1.4014%" y="1438.50"></text></g><g><title>_compile_core (numba/core/dispatcher.py:107) (52 samples, 0.37%)</title><rect x="1.1514%" y="1444" width="0.3673%" height="15" fill="rgb(206,192,2)" fg:x="163" fg:w="52"/><text x="1.4014%" y="1454.50"></text></g><g><title>compile_extra (numba/core/compiler.py:744) (52 samples, 0.37%)</title><rect x="1.1514%" y="1460" width="0.3673%" height="15" fill="rgb(241,108,4)" fg:x="163" fg:w="52"/><text x="1.4014%" y="1470.50"></text></g><g><title>compile_extra (numba/core/compiler.py:438) (52 samples, 0.37%)</title><rect x="1.1514%" y="1476" width="0.3673%" height="15" fill="rgb(247,173,49)" fg:x="163" fg:w="52"/><text x="1.4014%" y="1486.50"></text></g><g><title>_compile_bytecode (numba/core/compiler.py:506) (52 samples, 0.37%)</title><rect x="1.1514%" y="1492" width="0.3673%" height="15" fill="rgb(224,114,35)" fg:x="163" fg:w="52"/><text x="1.4014%" y="1502.50"></text></g><g><title>_compile_core (numba/core/compiler.py:472) (52 samples, 0.37%)</title><rect x="1.1514%" y="1508" width="0.3673%" height="15" fill="rgb(245,159,27)" fg:x="163" fg:w="52"/><text x="1.4014%" y="1518.50"></text></g><g><title>run (numba/core/compiler_machinery.py:356) (52 samples, 0.37%)</title><rect x="1.1514%" y="1524" width="0.3673%" height="15" fill="rgb(245,172,44)" fg:x="163" fg:w="52"/><text x="1.4014%" y="1534.50"></text></g><g><title>_acquire_compile_lock (numba/core/compiler_lock.py:35) (52 samples, 0.37%)</title><rect x="1.1514%" y="1540" width="0.3673%" height="15" fill="rgb(236,23,11)" fg:x="163" fg:w="52"/><text x="1.4014%" y="1550.50"></text></g><g><title>_runPass (numba/core/compiler_machinery.py:311) (51 samples, 0.36%)</title><rect x="1.1584%" y="1556" width="0.3602%" height="15" fill="rgb(205,117,38)" fg:x="164" fg:w="51"/><text x="1.4084%" y="1566.50"></text></g><g><title>check (numba/core/compiler_machinery.py:273) (51 samples, 0.36%)</title><rect x="1.1584%" y="1572" width="0.3602%" height="15" fill="rgb(237,72,25)" fg:x="164" fg:w="51"/><text x="1.4084%" y="1582.50"></text></g><g><title>get_call_type (numba/core/types/functions.py:308) (55 samples, 0.39%)</title><rect x="1.1443%" y="1284" width="0.3885%" height="15" fill="rgb(244,70,9)" fg:x="162" fg:w="55"/><text x="1.3943%" y="1294.50"></text></g><g><title>apply (numba/core/typing/templates.py:350) (55 samples, 0.39%)</title><rect x="1.1443%" y="1300" width="0.3885%" height="15" fill="rgb(217,125,39)" fg:x="162" fg:w="55"/><text x="1.3943%" y="1310.50"></text></g><g><title>run_pass (numba/core/typed_passes.py:112) (58 samples, 0.41%)</title><rect x="1.1372%" y="1140" width="0.4097%" height="15" fill="rgb(235,36,10)" fg:x="161" fg:w="58"/><text x="1.3872%" y="1150.50"></text></g><g><title>type_inference_stage (numba/core/typed_passes.py:93) (57 samples, 0.40%)</title><rect x="1.1443%" y="1156" width="0.4026%" height="15" fill="rgb(251,123,47)" fg:x="162" fg:w="57"/><text x="1.3943%" y="1166.50"></text></g><g><title>propagate (numba/core/typeinfer.py:1083) (57 samples, 0.40%)</title><rect x="1.1443%" y="1172" width="0.4026%" height="15" fill="rgb(221,13,13)" fg:x="162" fg:w="57"/><text x="1.3943%" y="1182.50"></text></g><g><title>propagate (numba/core/typeinfer.py:160) (57 samples, 0.40%)</title><rect x="1.1443%" y="1188" width="0.4026%" height="15" fill="rgb(238,131,9)" fg:x="162" fg:w="57"/><text x="1.3943%" y="1198.50"></text></g><g><title>__call__ (numba/core/typeinfer.py:583) (57 samples, 0.40%)</title><rect x="1.1443%" y="1204" width="0.4026%" height="15" fill="rgb(211,50,8)" fg:x="162" fg:w="57"/><text x="1.3943%" y="1214.50"></text></g><g><title>resolve (numba/core/typeinfer.py:606) (57 samples, 0.40%)</title><rect x="1.1443%" y="1220" width="0.4026%" height="15" fill="rgb(245,182,24)" fg:x="162" fg:w="57"/><text x="1.3943%" y="1230.50"></text></g><g><title>resolve_call (numba/core/typeinfer.py:1577) (57 samples, 0.40%)</title><rect x="1.1443%" y="1236" width="0.4026%" height="15" fill="rgb(242,14,37)" fg:x="162" fg:w="57"/><text x="1.3943%" y="1246.50"></text></g><g><title>resolve_function_type (numba/core/typing/context.py:196) (57 samples, 0.40%)</title><rect x="1.1443%" y="1252" width="0.4026%" height="15" fill="rgb(246,228,12)" fg:x="162" fg:w="57"/><text x="1.3943%" y="1262.50"></text></g><g><title>_resolve_user_function_type (numba/core/typing/context.py:248) (57 samples, 0.40%)</title><rect x="1.1443%" y="1268" width="0.4026%" height="15" fill="rgb(213,55,15)" fg:x="162" fg:w="57"/><text x="1.3943%" y="1278.50"></text></g><g><title>run_pass (numba/core/typed_passes.py:112) (86 samples, 0.61%)</title><rect x="1.0030%" y="772" width="0.6075%" height="15" fill="rgb(209,9,3)" fg:x="142" fg:w="86"/><text x="1.2530%" y="782.50"></text></g><g><title>type_inference_stage (numba/core/typed_passes.py:93) (86 samples, 0.61%)</title><rect x="1.0030%" y="788" width="0.6075%" height="15" fill="rgb(230,59,30)" fg:x="142" fg:w="86"/><text x="1.2530%" y="798.50"></text></g><g><title>propagate (numba/core/typeinfer.py:1083) (86 samples, 0.61%)</title><rect x="1.0030%" y="804" width="0.6075%" height="15" fill="rgb(209,121,21)" fg:x="142" fg:w="86"/><text x="1.2530%" y="814.50"></text></g><g><title>propagate (numba/core/typeinfer.py:160) (86 samples, 0.61%)</title><rect x="1.0030%" y="820" width="0.6075%" height="15" fill="rgb(220,109,13)" fg:x="142" fg:w="86"/><text x="1.2530%" y="830.50"></text></g><g><title>__call__ (numba/core/typeinfer.py:583) (86 samples, 0.61%)</title><rect x="1.0030%" y="836" width="0.6075%" height="15" fill="rgb(232,18,1)" fg:x="142" fg:w="86"/><text x="1.2530%" y="846.50"></text></g><g><title>resolve (numba/core/typeinfer.py:606) (86 samples, 0.61%)</title><rect x="1.0030%" y="852" width="0.6075%" height="15" fill="rgb(215,41,42)" fg:x="142" fg:w="86"/><text x="1.2530%" y="862.50"></text></g><g><title>resolve_call (numba/core/typeinfer.py:1577) (86 samples, 0.61%)</title><rect x="1.0030%" y="868" width="0.6075%" height="15" fill="rgb(224,123,36)" fg:x="142" fg:w="86"/><text x="1.2530%" y="878.50"></text></g><g><title>resolve_function_type (numba/core/typing/context.py:196) (86 samples, 0.61%)</title><rect x="1.0030%" y="884" width="0.6075%" height="15" fill="rgb(240,125,3)" fg:x="142" fg:w="86"/><text x="1.2530%" y="894.50"></text></g><g><title>_resolve_user_function_type (numba/core/typing/context.py:248) (86 samples, 0.61%)</title><rect x="1.0030%" y="900" width="0.6075%" height="15" fill="rgb(205,98,50)" fg:x="142" fg:w="86"/><text x="1.2530%" y="910.50"></text></g><g><title>get_call_type (numba/core/types/functions.py:541) (69 samples, 0.49%)</title><rect x="1.1231%" y="916" width="0.4874%" height="15" fill="rgb(205,185,37)" fg:x="159" fg:w="69"/><text x="1.3731%" y="926.50"></text></g><g><title>get_call_template (numba/core/dispatcher.py:318) (69 samples, 0.49%)</title><rect x="1.1231%" y="932" width="0.4874%" height="15" fill="rgb(238,207,15)" fg:x="159" fg:w="69"/><text x="1.3731%" y="942.50"></text></g><g><title>compile (numba/core/dispatcher.py:905) (68 samples, 0.48%)</title><rect x="1.1302%" y="948" width="0.4803%" height="15" fill="rgb(213,199,42)" fg:x="160" fg:w="68"/><text x="1.3802%" y="958.50"></text></g><g><title>compile (numba/core/dispatcher.py:80) (68 samples, 0.48%)</title><rect x="1.1302%" y="964" width="0.4803%" height="15" fill="rgb(235,201,11)" fg:x="160" fg:w="68"/><text x="1.3802%" y="974.50"></text></g><g><title>_compile_cached (numba/core/dispatcher.py:94) (68 samples, 0.48%)</title><rect x="1.1302%" y="980" width="0.4803%" height="15" fill="rgb(207,46,11)" fg:x="160" fg:w="68"/><text x="1.3802%" y="990.50"></text></g><g><title>_compile_core (numba/core/dispatcher.py:107) (68 samples, 0.48%)</title><rect x="1.1302%" y="996" width="0.4803%" height="15" fill="rgb(241,35,35)" fg:x="160" fg:w="68"/><text x="1.3802%" y="1006.50"></text></g><g><title>compile_extra (numba/core/compiler.py:744) (68 samples, 0.48%)</title><rect x="1.1302%" y="1012" width="0.4803%" height="15" fill="rgb(243,32,47)" fg:x="160" fg:w="68"/><text x="1.3802%" y="1022.50"></text></g><g><title>compile_extra (numba/core/compiler.py:438) (68 samples, 0.48%)</title><rect x="1.1302%" y="1028" width="0.4803%" height="15" fill="rgb(247,202,23)" fg:x="160" fg:w="68"/><text x="1.3802%" y="1038.50"></text></g><g><title>_compile_bytecode (numba/core/compiler.py:506) (68 samples, 0.48%)</title><rect x="1.1302%" y="1044" width="0.4803%" height="15" fill="rgb(219,102,11)" fg:x="160" fg:w="68"/><text x="1.3802%" y="1054.50"></text></g><g><title>_compile_core (numba/core/compiler.py:472) (68 samples, 0.48%)</title><rect x="1.1302%" y="1060" width="0.4803%" height="15" fill="rgb(243,110,44)" fg:x="160" fg:w="68"/><text x="1.3802%" y="1070.50"></text></g><g><title>run (numba/core/compiler_machinery.py:356) (68 samples, 0.48%)</title><rect x="1.1302%" y="1076" width="0.4803%" height="15" fill="rgb(222,74,54)" fg:x="160" fg:w="68"/><text x="1.3802%" y="1086.50"></text></g><g><title>_acquire_compile_lock (numba/core/compiler_lock.py:35) (68 samples, 0.48%)</title><rect x="1.1302%" y="1092" width="0.4803%" height="15" fill="rgb(216,99,12)" fg:x="160" fg:w="68"/><text x="1.3802%" y="1102.50"></text></g><g><title>_runPass (numba/core/compiler_machinery.py:311) (67 samples, 0.47%)</title><rect x="1.1372%" y="1108" width="0.4733%" height="15" fill="rgb(226,22,26)" fg:x="161" fg:w="67"/><text x="1.3872%" y="1118.50"></text></g><g><title>check (numba/core/compiler_machinery.py:273) (67 samples, 0.47%)</title><rect x="1.1372%" y="1124" width="0.4733%" height="15" fill="rgb(217,163,10)" fg:x="161" fg:w="67"/><text x="1.3872%" y="1134.50"></text></g><g><title>finalize (numba/core/codegen.py:762) (19 samples, 0.13%)</title><rect x="1.6529%" y="836" width="0.1342%" height="15" fill="rgb(213,25,53)" fg:x="234" fg:w="19"/><text x="1.9029%" y="846.50"></text></g><g><title>_optimize_final_module (numba/core/codegen.py:682) (17 samples, 0.12%)</title><rect x="1.6670%" y="852" width="0.1201%" height="15" fill="rgb(252,105,26)" fg:x="236" fg:w="17"/><text x="1.9170%" y="862.50"></text></g><g><title>run (llvmlite/binding/passmanagers.py:698) (17 samples, 0.12%)</title><rect x="1.6670%" y="868" width="0.1201%" height="15" fill="rgb(220,39,43)" fg:x="236" fg:w="17"/><text x="1.9170%" y="878.50"></text></g><g><title>__call__ (llvmlite/binding/ffi.py:192) (17 samples, 0.12%)</title><rect x="1.6670%" y="884" width="0.1201%" height="15" fill="rgb(229,68,48)" fg:x="236" fg:w="17"/><text x="1.9170%" y="894.50"></text></g><g><title>run_pass (numba/core/typed_passes.py:497) (34 samples, 0.24%)</title><rect x="1.6529%" y="772" width="0.2402%" height="15" fill="rgb(252,8,32)" fg:x="234" fg:w="34"/><text x="1.9029%" y="782.50"></text></g><g><title>get_executable (numba/core/cpu.py:239) (34 samples, 0.24%)</title><rect x="1.6529%" y="788" width="0.2402%" height="15" fill="rgb(223,20,43)" fg:x="234" fg:w="34"/><text x="1.9029%" y="798.50"></text></g><g><title>get_pointer_to_function (numba/core/codegen.py:989) (34 samples, 0.24%)</title><rect x="1.6529%" y="804" width="0.2402%" height="15" fill="rgb(229,81,49)" fg:x="234" fg:w="34"/><text x="1.9029%" y="814.50"></text></g><g><title>_ensure_finalized (numba/core/codegen.py:567) (34 samples, 0.24%)</title><rect x="1.6529%" y="820" width="0.2402%" height="15" fill="rgb(236,28,36)" fg:x="234" fg:w="34"/><text x="1.9029%" y="830.50"></text></g><g><title>finalize (numba/core/codegen.py:765) (15 samples, 0.11%)</title><rect x="1.7871%" y="836" width="0.1060%" height="15" fill="rgb(249,185,26)" fg:x="253" fg:w="15"/><text x="2.0371%" y="846.50"></text></g><g><title>compile (numba/core/dispatcher.py:905) (129 samples, 0.91%)</title><rect x="1.0030%" y="580" width="0.9112%" height="15" fill="rgb(249,174,33)" fg:x="142" fg:w="129"/><text x="1.2530%" y="590.50"></text></g><g><title>compile (numba/core/dispatcher.py:80) (129 samples, 0.91%)</title><rect x="1.0030%" y="596" width="0.9112%" height="15" fill="rgb(233,201,37)" fg:x="142" fg:w="129"/><text x="1.2530%" y="606.50"></text></g><g><title>_compile_cached (numba/core/dispatcher.py:94) (129 samples, 0.91%)</title><rect x="1.0030%" y="612" width="0.9112%" height="15" fill="rgb(221,78,26)" fg:x="142" fg:w="129"/><text x="1.2530%" y="622.50"></text></g><g><title>_compile_core (numba/core/dispatcher.py:107) (129 samples, 0.91%)</title><rect x="1.0030%" y="628" width="0.9112%" height="15" fill="rgb(250,127,30)" fg:x="142" fg:w="129"/><text x="1.2530%" y="638.50"></text></g><g><title>compile_extra (numba/core/compiler.py:744) (129 samples, 0.91%)</title><rect x="1.0030%" y="644" width="0.9112%" height="15" fill="rgb(230,49,44)" fg:x="142" fg:w="129"/><text x="1.2530%" y="654.50"></text></g><g><title>compile_extra (numba/core/compiler.py:438) (129 samples, 0.91%)</title><rect x="1.0030%" y="660" width="0.9112%" height="15" fill="rgb(229,67,23)" fg:x="142" fg:w="129"/><text x="1.2530%" y="670.50"></text></g><g><title>_compile_bytecode (numba/core/compiler.py:506) (129 samples, 0.91%)</title><rect x="1.0030%" y="676" width="0.9112%" height="15" fill="rgb(249,83,47)" fg:x="142" fg:w="129"/><text x="1.2530%" y="686.50"></text></g><g><title>_compile_core (numba/core/compiler.py:472) (129 samples, 0.91%)</title><rect x="1.0030%" y="692" width="0.9112%" height="15" fill="rgb(215,43,3)" fg:x="142" fg:w="129"/><text x="1.2530%" y="702.50"></text></g><g><title>run (numba/core/compiler_machinery.py:356) (129 samples, 0.91%)</title><rect x="1.0030%" y="708" width="0.9112%" height="15" fill="rgb(238,154,13)" fg:x="142" fg:w="129"/><text x="1.2530%" y="718.50"></text></g><g><title>_acquire_compile_lock (numba/core/compiler_lock.py:35) (129 samples, 0.91%)</title><rect x="1.0030%" y="724" width="0.9112%" height="15" fill="rgb(219,56,2)" fg:x="142" fg:w="129"/><text x="1.2530%" y="734.50"></text></g><g><title>_runPass (numba/core/compiler_machinery.py:311) (129 samples, 0.91%)</title><rect x="1.0030%" y="740" width="0.9112%" height="15" fill="rgb(233,0,4)" fg:x="142" fg:w="129"/><text x="1.2530%" y="750.50"></text></g><g><title>check (numba/core/compiler_machinery.py:273) (129 samples, 0.91%)</title><rect x="1.0030%" y="756" width="0.9112%" height="15" fill="rgb(235,30,7)" fg:x="142" fg:w="129"/><text x="1.2530%" y="766.50"></text></g><g><title>run_pass (numba/core/typed_passes.py:112) (135 samples, 0.95%)</title><rect x="0.9818%" y="404" width="0.9536%" height="15" fill="rgb(250,79,13)" fg:x="139" fg:w="135"/><text x="1.2318%" y="414.50"></text></g><g><title>type_inference_stage (numba/core/typed_passes.py:93) (135 samples, 0.95%)</title><rect x="0.9818%" y="420" width="0.9536%" height="15" fill="rgb(211,146,34)" fg:x="139" fg:w="135"/><text x="1.2318%" y="430.50"></text></g><g><title>propagate (numba/core/typeinfer.py:1083) (135 samples, 0.95%)</title><rect x="0.9818%" y="436" width="0.9536%" height="15" fill="rgb(228,22,38)" fg:x="139" fg:w="135"/><text x="1.2318%" y="446.50"></text></g><g><title>propagate (numba/core/typeinfer.py:160) (135 samples, 0.95%)</title><rect x="0.9818%" y="452" width="0.9536%" height="15" fill="rgb(235,168,5)" fg:x="139" fg:w="135"/><text x="1.2318%" y="462.50"></text></g><g><title>__call__ (numba/core/typeinfer.py:583) (135 samples, 0.95%)</title><rect x="0.9818%" y="468" width="0.9536%" height="15" fill="rgb(221,155,16)" fg:x="139" fg:w="135"/><text x="1.2318%" y="478.50"></text></g><g><title>resolve (numba/core/typeinfer.py:606) (135 samples, 0.95%)</title><rect x="0.9818%" y="484" width="0.9536%" height="15" fill="rgb(215,215,53)" fg:x="139" fg:w="135"/><text x="1.2318%" y="494.50"></text></g><g><title>resolve_call (numba/core/typeinfer.py:1577) (135 samples, 0.95%)</title><rect x="0.9818%" y="500" width="0.9536%" height="15" fill="rgb(223,4,10)" fg:x="139" fg:w="135"/><text x="1.2318%" y="510.50"></text></g><g><title>resolve_function_type (numba/core/typing/context.py:196) (135 samples, 0.95%)</title><rect x="0.9818%" y="516" width="0.9536%" height="15" fill="rgb(234,103,6)" fg:x="139" fg:w="135"/><text x="1.2318%" y="526.50"></text></g><g><title>_resolve_user_function_type (numba/core/typing/context.py:248) (135 samples, 0.95%)</title><rect x="0.9818%" y="532" width="0.9536%" height="15" fill="rgb(227,97,0)" fg:x="139" fg:w="135"/><text x="1.2318%" y="542.50"></text></g><g><title>get_call_type (numba/core/types/functions.py:541) (132 samples, 0.93%)</title><rect x="1.0030%" y="548" width="0.9324%" height="15" fill="rgb(234,150,53)" fg:x="142" fg:w="132"/><text x="1.2530%" y="558.50"></text></g><g><title>get_call_template (numba/core/dispatcher.py:318) (132 samples, 0.93%)</title><rect x="1.0030%" y="564" width="0.9324%" height="15" fill="rgb(228,201,54)" fg:x="142" fg:w="132"/><text x="1.2530%" y="574.50"></text></g><g><title>compile (numba/core/ccallback.py:68) (139 samples, 0.98%)</title><rect x="0.9818%" y="196" width="0.9818%" height="15" fill="rgb(222,22,37)" fg:x="139" fg:w="139"/><text x="1.2318%" y="206.50"></text></g><g><title>_compile_uncached (numba/core/ccallback.py:82) (139 samples, 0.98%)</title><rect x="0.9818%" y="212" width="0.9818%" height="15" fill="rgb(237,53,32)" fg:x="139" fg:w="139"/><text x="1.2318%" y="222.50"></text></g><g><title>compile (numba/core/dispatcher.py:80) (139 samples, 0.98%)</title><rect x="0.9818%" y="228" width="0.9818%" height="15" fill="rgb(233,25,53)" fg:x="139" fg:w="139"/><text x="1.2318%" y="238.50"></text></g><g><title>_compile_cached (numba/core/dispatcher.py:94) (139 samples, 0.98%)</title><rect x="0.9818%" y="244" width="0.9818%" height="15" fill="rgb(210,40,34)" fg:x="139" fg:w="139"/><text x="1.2318%" y="254.50"></text></g><g><title>_compile_core (numba/core/dispatcher.py:107) (139 samples, 0.98%)</title><rect x="0.9818%" y="260" width="0.9818%" height="15" fill="rgb(241,220,44)" fg:x="139" fg:w="139"/><text x="1.2318%" y="270.50"></text></g><g><title>compile_extra (numba/core/compiler.py:744) (139 samples, 0.98%)</title><rect x="0.9818%" y="276" width="0.9818%" height="15" fill="rgb(235,28,35)" fg:x="139" fg:w="139"/><text x="1.2318%" y="286.50"></text></g><g><title>compile_extra (numba/core/compiler.py:438) (139 samples, 0.98%)</title><rect x="0.9818%" y="292" width="0.9818%" height="15" fill="rgb(210,56,17)" fg:x="139" fg:w="139"/><text x="1.2318%" y="302.50"></text></g><g><title>_compile_bytecode (numba/core/compiler.py:506) (139 samples, 0.98%)</title><rect x="0.9818%" y="308" width="0.9818%" height="15" fill="rgb(224,130,29)" fg:x="139" fg:w="139"/><text x="1.2318%" y="318.50"></text></g><g><title>_compile_core (numba/core/compiler.py:472) (139 samples, 0.98%)</title><rect x="0.9818%" y="324" width="0.9818%" height="15" fill="rgb(235,212,8)" fg:x="139" fg:w="139"/><text x="1.2318%" y="334.50"></text></g><g><title>run (numba/core/compiler_machinery.py:356) (139 samples, 0.98%)</title><rect x="0.9818%" y="340" width="0.9818%" height="15" fill="rgb(223,33,50)" fg:x="139" fg:w="139"/><text x="1.2318%" y="350.50"></text></g><g><title>_acquire_compile_lock (numba/core/compiler_lock.py:35) (139 samples, 0.98%)</title><rect x="0.9818%" y="356" width="0.9818%" height="15" fill="rgb(219,149,13)" fg:x="139" fg:w="139"/><text x="1.2318%" y="366.50"></text></g><g><title>_runPass (numba/core/compiler_machinery.py:311) (139 samples, 0.98%)</title><rect x="0.9818%" y="372" width="0.9818%" height="15" fill="rgb(250,156,29)" fg:x="139" fg:w="139"/><text x="1.2318%" y="382.50"></text></g><g><title>check (numba/core/compiler_machinery.py:273) (139 samples, 0.98%)</title><rect x="0.9818%" y="388" width="0.9818%" height="15" fill="rgb(216,193,19)" fg:x="139" fg:w="139"/><text x="1.2318%" y="398.50"></text></g><g><title>finalize (numba/core/codegen.py:762) (15 samples, 0.11%)</title><rect x="1.9708%" y="244" width="0.1060%" height="15" fill="rgb(216,135,14)" fg:x="279" fg:w="15"/><text x="2.2208%" y="254.50"></text></g><g><title>__init__ (pymc_bart/pgbart.py:127) (293 samples, 2.07%)</title><rect x="0.1060%" y="116" width="2.0696%" height="15" fill="rgb(241,47,5)" fg:x="15" fg:w="293"/><text x="0.3560%" y="126.50">_..</text></g><g><title>__init__ (pymc_bart/compile_pymc.py:43) (169 samples, 1.19%)</title><rect x="0.9818%" y="132" width="1.1938%" height="15" fill="rgb(233,42,35)" fg:x="139" fg:w="169"/><text x="1.2318%" y="142.50"></text></g><g><title>_generate_logp_function (pymc_bart/compile_pymc.py:109) (169 samples, 1.19%)</title><rect x="0.9818%" y="148" width="1.1938%" height="15" fill="rgb(231,13,6)" fg:x="139" fg:w="169"/><text x="1.2318%" y="158.50"></text></g><g><title>wrapper (numba/core/decorators.py:275) (169 samples, 1.19%)</title><rect x="0.9818%" y="164" width="1.1938%" height="15" fill="rgb(207,181,40)" fg:x="139" fg:w="169"/><text x="1.2318%" y="174.50"></text></g><g><title>_acquire_compile_lock (numba/core/compiler_lock.py:35) (169 samples, 1.19%)</title><rect x="0.9818%" y="180" width="1.1938%" height="15" fill="rgb(254,173,49)" fg:x="139" fg:w="169"/><text x="1.2318%" y="190.50"></text></g><g><title>compile (numba/core/ccallback.py:75) (30 samples, 0.21%)</title><rect x="1.9637%" y="196" width="0.2119%" height="15" fill="rgb(221,1,38)" fg:x="278" fg:w="30"/><text x="2.2137%" y="206.50"></text></g><g><title>get_pointer_to_function (numba/core/codegen.py:989) (30 samples, 0.21%)</title><rect x="1.9637%" y="212" width="0.2119%" height="15" fill="rgb(206,124,46)" fg:x="278" fg:w="30"/><text x="2.2137%" y="222.50"></text></g><g><title>_ensure_finalized (numba/core/codegen.py:567) (30 samples, 0.21%)</title><rect x="1.9637%" y="228" width="0.2119%" height="15" fill="rgb(249,21,11)" fg:x="278" fg:w="30"/><text x="2.2137%" y="238.50"></text></g><g><title>test_bikes (bart_examples.py:60) (294 samples, 2.08%)</title><rect x="0.1060%" y="100" width="2.0767%" height="15" fill="rgb(222,201,40)" fg:x="15" fg:w="294"/><text x="0.3560%" y="110.50">t..</text></g><g><title>astep (pymc_bart/pgbart.py:153) (13,640 samples, 96.35%)</title><rect x="2.1897%" y="116" width="96.3481%" height="15" fill="rgb(235,61,29)" fg:x="310" fg:w="13640"/><text x="2.4397%" y="126.50">astep (pymc_bart/pgbart.py:153)</text></g><g><title>test_bikes (bart_examples.py:63) (13,641 samples, 96.36%)</title><rect x="2.1897%" y="100" width="96.3552%" height="15" fill="rgb(219,207,3)" fg:x="310" fg:w="13641"/><text x="2.4397%" y="110.50">test_bikes (bart_examples.py:63)</text></g><g><title>&lt;module&gt; (bart_examples.py:160) (13,947 samples, 98.52%)</title><rect x="0.0353%" y="68" width="98.5166%" height="15" fill="rgb(222,56,46)" fg:x="5" fg:w="13947"/><text x="0.2853%" y="78.50">&lt;module&gt; (bart_examples.py:160)</text></g><g><title>main (bart_examples.py:142) (13,947 samples, 98.52%)</title><rect x="0.0353%" y="84" width="98.5166%" height="15" fill="rgb(239,76,54)" fg:x="5" fg:w="13947"/><text x="0.2853%" y="94.50">main (bart_examples.py:142)</text></g><g><title>&lt;module&gt; (arviz/data/__init__.py:3) (22 samples, 0.16%)</title><rect x="98.5520%" y="260" width="0.1554%" height="15" fill="rgb(231,124,27)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (22 samples, 0.16%)</title><rect x="98.5520%" y="276" width="0.1554%" height="15" fill="rgb(249,195,6)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (22 samples, 0.16%)</title><rect x="98.5520%" y="292" width="0.1554%" height="15" fill="rgb(237,174,47)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (22 samples, 0.16%)</title><rect x="98.5520%" y="308" width="0.1554%" height="15" fill="rgb(206,201,31)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (22 samples, 0.16%)</title><rect x="98.5520%" y="324" width="0.1554%" height="15" fill="rgb(231,57,52)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (22 samples, 0.16%)</title><rect x="98.5520%" y="340" width="0.1554%" height="15" fill="rgb(248,177,22)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="350.50"></text></g><g><title>&lt;module&gt; (arviz/data/base.py:12) (22 samples, 0.16%)</title><rect x="98.5520%" y="356" width="0.1554%" height="15" fill="rgb(215,211,37)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (22 samples, 0.16%)</title><rect x="98.5520%" y="372" width="0.1554%" height="15" fill="rgb(241,128,51)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (22 samples, 0.16%)</title><rect x="98.5520%" y="388" width="0.1554%" height="15" fill="rgb(227,165,31)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (22 samples, 0.16%)</title><rect x="98.5520%" y="404" width="0.1554%" height="15" fill="rgb(228,167,24)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (22 samples, 0.16%)</title><rect x="98.5520%" y="420" width="0.1554%" height="15" fill="rgb(228,143,12)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (22 samples, 0.16%)</title><rect x="98.5520%" y="436" width="0.1554%" height="15" fill="rgb(249,149,8)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="446.50"></text></g><g><title>&lt;module&gt; (xarray/__init__.py:3) (22 samples, 0.16%)</title><rect x="98.5520%" y="452" width="0.1554%" height="15" fill="rgb(243,35,44)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="462.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1415) (22 samples, 0.16%)</title><rect x="98.5520%" y="468" width="0.1554%" height="15" fill="rgb(246,89,9)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (22 samples, 0.16%)</title><rect x="98.5520%" y="484" width="0.1554%" height="15" fill="rgb(233,213,13)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (22 samples, 0.16%)</title><rect x="98.5520%" y="500" width="0.1554%" height="15" fill="rgb(233,141,41)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (22 samples, 0.16%)</title><rect x="98.5520%" y="516" width="0.1554%" height="15" fill="rgb(239,167,4)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (22 samples, 0.16%)</title><rect x="98.5520%" y="532" width="0.1554%" height="15" fill="rgb(209,217,16)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (22 samples, 0.16%)</title><rect x="98.5520%" y="548" width="0.1554%" height="15" fill="rgb(219,88,35)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (22 samples, 0.16%)</title><rect x="98.5520%" y="564" width="0.1554%" height="15" fill="rgb(220,193,23)" fg:x="13952" fg:w="22"/><text x="98.8020%" y="574.50"></text></g><g><title>&lt;module&gt; (arviz/__init__.py:33) (24 samples, 0.17%)</title><rect x="98.5520%" y="164" width="0.1695%" height="15" fill="rgb(230,90,52)" fg:x="13952" fg:w="24"/><text x="98.8020%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (24 samples, 0.17%)</title><rect x="98.5520%" y="180" width="0.1695%" height="15" fill="rgb(252,106,19)" fg:x="13952" fg:w="24"/><text x="98.8020%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (24 samples, 0.17%)</title><rect x="98.5520%" y="196" width="0.1695%" height="15" fill="rgb(206,74,20)" fg:x="13952" fg:w="24"/><text x="98.8020%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (24 samples, 0.17%)</title><rect x="98.5520%" y="212" width="0.1695%" height="15" fill="rgb(230,138,44)" fg:x="13952" fg:w="24"/><text x="98.8020%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (24 samples, 0.17%)</title><rect x="98.5520%" y="228" width="0.1695%" height="15" fill="rgb(235,182,43)" fg:x="13952" fg:w="24"/><text x="98.8020%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (24 samples, 0.17%)</title><rect x="98.5520%" y="244" width="0.1695%" height="15" fill="rgb(242,16,51)" fg:x="13952" fg:w="24"/><text x="98.8020%" y="254.50"></text></g><g><title>check (numba/core/compiler_machinery.py:273) (20 samples, 0.14%)</title><rect x="98.8204%" y="692" width="0.1413%" height="15" fill="rgb(248,9,4)" fg:x="13990" fg:w="20"/><text x="99.0704%" y="702.50"></text></g><g><title>_compile_for_argtys (numba/np/ufunc/dufunc.py:346) (33 samples, 0.23%)</title><rect x="98.7356%" y="516" width="0.2331%" height="15" fill="rgb(210,31,22)" fg:x="13978" fg:w="33"/><text x="98.9856%" y="526.50"></text></g><g><title>_compile_element_wise_function (numba/np/ufunc/ufuncbuilder.py:175) (33 samples, 0.23%)</title><rect x="98.7356%" y="532" width="0.2331%" height="15" fill="rgb(239,54,39)" fg:x="13978" fg:w="33"/><text x="98.9856%" y="542.50"></text></g><g><title>compile (numba/np/ufunc/ufuncbuilder.py:123) (33 samples, 0.23%)</title><rect x="98.7356%" y="548" width="0.2331%" height="15" fill="rgb(230,99,41)" fg:x="13978" fg:w="33"/><text x="98.9856%" y="558.50"></text></g><g><title>_compile_core (numba/np/ufunc/ufuncbuilder.py:156) (33 samples, 0.23%)</title><rect x="98.7356%" y="564" width="0.2331%" height="15" fill="rgb(253,106,12)" fg:x="13978" fg:w="33"/><text x="98.9856%" y="574.50"></text></g><g><title>compile_extra (numba/core/compiler.py:744) (21 samples, 0.15%)</title><rect x="98.8204%" y="580" width="0.1483%" height="15" fill="rgb(213,46,41)" fg:x="13990" fg:w="21"/><text x="99.0704%" y="590.50"></text></g><g><title>compile_extra (numba/core/compiler.py:438) (21 samples, 0.15%)</title><rect x="98.8204%" y="596" width="0.1483%" height="15" fill="rgb(215,133,35)" fg:x="13990" fg:w="21"/><text x="99.0704%" y="606.50"></text></g><g><title>_compile_bytecode (numba/core/compiler.py:506) (21 samples, 0.15%)</title><rect x="98.8204%" y="612" width="0.1483%" height="15" fill="rgb(213,28,5)" fg:x="13990" fg:w="21"/><text x="99.0704%" y="622.50"></text></g><g><title>_compile_core (numba/core/compiler.py:472) (21 samples, 0.15%)</title><rect x="98.8204%" y="628" width="0.1483%" height="15" fill="rgb(215,77,49)" fg:x="13990" fg:w="21"/><text x="99.0704%" y="638.50"></text></g><g><title>run (numba/core/compiler_machinery.py:356) (21 samples, 0.15%)</title><rect x="98.8204%" y="644" width="0.1483%" height="15" fill="rgb(248,100,22)" fg:x="13990" fg:w="21"/><text x="99.0704%" y="654.50"></text></g><g><title>_acquire_compile_lock (numba/core/compiler_lock.py:35) (21 samples, 0.15%)</title><rect x="98.8204%" y="660" width="0.1483%" height="15" fill="rgb(208,67,9)" fg:x="13990" fg:w="21"/><text x="99.0704%" y="670.50"></text></g><g><title>_runPass (numba/core/compiler_machinery.py:311) (21 samples, 0.15%)</title><rect x="98.8204%" y="676" width="0.1483%" height="15" fill="rgb(219,133,21)" fg:x="13990" fg:w="21"/><text x="99.0704%" y="686.50"></text></g><g><title>&lt;module&gt; (arviz/plots/__init__.py:11) (39 samples, 0.28%)</title><rect x="98.7215%" y="260" width="0.2755%" height="15" fill="rgb(246,46,29)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (39 samples, 0.28%)</title><rect x="98.7215%" y="276" width="0.2755%" height="15" fill="rgb(246,185,52)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (39 samples, 0.28%)</title><rect x="98.7215%" y="292" width="0.2755%" height="15" fill="rgb(252,136,11)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (39 samples, 0.28%)</title><rect x="98.7215%" y="308" width="0.2755%" height="15" fill="rgb(219,138,53)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (39 samples, 0.28%)</title><rect x="98.7215%" y="324" width="0.2755%" height="15" fill="rgb(211,51,23)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (39 samples, 0.28%)</title><rect x="98.7215%" y="340" width="0.2755%" height="15" fill="rgb(247,221,28)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="350.50"></text></g><g><title>&lt;module&gt; (arviz/plots/ecdfplot.py:14) (39 samples, 0.28%)</title><rect x="98.7215%" y="356" width="0.2755%" height="15" fill="rgb(251,222,45)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (39 samples, 0.28%)</title><rect x="98.7215%" y="372" width="0.2755%" height="15" fill="rgb(217,162,53)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (39 samples, 0.28%)</title><rect x="98.7215%" y="388" width="0.2755%" height="15" fill="rgb(229,93,14)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (39 samples, 0.28%)</title><rect x="98.7215%" y="404" width="0.2755%" height="15" fill="rgb(209,67,49)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (39 samples, 0.28%)</title><rect x="98.7215%" y="420" width="0.2755%" height="15" fill="rgb(213,87,29)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (39 samples, 0.28%)</title><rect x="98.7215%" y="436" width="0.2755%" height="15" fill="rgb(205,151,52)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="446.50"></text></g><g><title>&lt;module&gt; (arviz/stats/ecdf_utils.py:190) (39 samples, 0.28%)</title><rect x="98.7215%" y="452" width="0.2755%" height="15" fill="rgb(253,215,39)" fg:x="13976" fg:w="39"/><text x="98.9715%" y="462.50"></text></g><g><title>wrap (numba/np/ufunc/decorators.py:131) (37 samples, 0.26%)</title><rect x="98.7356%" y="468" width="0.2614%" height="15" fill="rgb(221,220,41)" fg:x="13978" fg:w="37"/><text x="98.9856%" y="478.50"></text></g><g><title>add (numba/np/ufunc/dufunc.py:272) (37 samples, 0.26%)</title><rect x="98.7356%" y="484" width="0.2614%" height="15" fill="rgb(218,133,21)" fg:x="13978" fg:w="37"/><text x="98.9856%" y="494.50"></text></g><g><title>_acquire_compile_lock (numba/core/compiler_lock.py:35) (37 samples, 0.26%)</title><rect x="98.7356%" y="500" width="0.2614%" height="15" fill="rgb(221,193,43)" fg:x="13978" fg:w="37"/><text x="98.9856%" y="510.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:610) (39 samples, 0.28%)</title><rect x="98.9970%" y="548" width="0.2755%" height="15" fill="rgb(240,128,52)" fg:x="14015" fg:w="39"/><text x="99.2470%" y="558.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (39 samples, 0.28%)</title><rect x="98.9970%" y="564" width="0.2755%" height="15" fill="rgb(253,114,12)" fg:x="14015" fg:w="39"/><text x="99.2470%" y="574.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (39 samples, 0.28%)</title><rect x="98.9970%" y="580" width="0.2755%" height="15" fill="rgb(215,223,47)" fg:x="14015" fg:w="39"/><text x="99.2470%" y="590.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (39 samples, 0.28%)</title><rect x="98.9970%" y="596" width="0.2755%" height="15" fill="rgb(248,225,23)" fg:x="14015" fg:w="39"/><text x="99.2470%" y="606.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (39 samples, 0.28%)</title><rect x="98.9970%" y="612" width="0.2755%" height="15" fill="rgb(250,108,0)" fg:x="14015" fg:w="39"/><text x="99.2470%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (39 samples, 0.28%)</title><rect x="98.9970%" y="628" width="0.2755%" height="15" fill="rgb(228,208,7)" fg:x="14015" fg:w="39"/><text x="99.2470%" y="638.50"></text></g><g><title>&lt;module&gt; (arviz/plots/plot_utils.py:11) (48 samples, 0.34%)</title><rect x="98.9970%" y="452" width="0.3391%" height="15" fill="rgb(244,45,10)" fg:x="14015" fg:w="48"/><text x="99.2470%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (48 samples, 0.34%)</title><rect x="98.9970%" y="468" width="0.3391%" height="15" fill="rgb(207,125,25)" fg:x="14015" fg:w="48"/><text x="99.2470%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (48 samples, 0.34%)</title><rect x="98.9970%" y="484" width="0.3391%" height="15" fill="rgb(210,195,18)" fg:x="14015" fg:w="48"/><text x="99.2470%" y="494.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (48 samples, 0.34%)</title><rect x="98.9970%" y="500" width="0.3391%" height="15" fill="rgb(249,80,12)" fg:x="14015" fg:w="48"/><text x="99.2470%" y="510.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (48 samples, 0.34%)</title><rect x="98.9970%" y="516" width="0.3391%" height="15" fill="rgb(221,65,9)" fg:x="14015" fg:w="48"/><text x="99.2470%" y="526.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (48 samples, 0.34%)</title><rect x="98.9970%" y="532" width="0.3391%" height="15" fill="rgb(235,49,36)" fg:x="14015" fg:w="48"/><text x="99.2470%" y="542.50"></text></g><g><title>&lt;module&gt; (arviz/__init__.py:34) (102 samples, 0.72%)</title><rect x="98.7215%" y="164" width="0.7205%" height="15" fill="rgb(225,32,20)" fg:x="13976" fg:w="102"/><text x="98.9715%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (102 samples, 0.72%)</title><rect x="98.7215%" y="180" width="0.7205%" height="15" fill="rgb(215,141,46)" fg:x="13976" fg:w="102"/><text x="98.9715%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (102 samples, 0.72%)</title><rect x="98.7215%" y="196" width="0.7205%" height="15" fill="rgb(250,160,47)" fg:x="13976" fg:w="102"/><text x="98.9715%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (102 samples, 0.72%)</title><rect x="98.7215%" y="212" width="0.7205%" height="15" fill="rgb(216,222,40)" fg:x="13976" fg:w="102"/><text x="98.9715%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (102 samples, 0.72%)</title><rect x="98.7215%" y="228" width="0.7205%" height="15" fill="rgb(234,217,39)" fg:x="13976" fg:w="102"/><text x="98.9715%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (102 samples, 0.72%)</title><rect x="98.7215%" y="244" width="0.7205%" height="15" fill="rgb(207,178,40)" fg:x="13976" fg:w="102"/><text x="98.9715%" y="254.50"></text></g><g><title>&lt;module&gt; (arviz/plots/__init__.py:3) (63 samples, 0.45%)</title><rect x="98.9970%" y="260" width="0.4450%" height="15" fill="rgb(221,136,13)" fg:x="14015" fg:w="63"/><text x="99.2470%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (63 samples, 0.45%)</title><rect x="98.9970%" y="276" width="0.4450%" height="15" fill="rgb(249,199,10)" fg:x="14015" fg:w="63"/><text x="99.2470%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (63 samples, 0.45%)</title><rect x="98.9970%" y="292" width="0.4450%" height="15" fill="rgb(249,222,13)" fg:x="14015" fg:w="63"/><text x="99.2470%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (63 samples, 0.45%)</title><rect x="98.9970%" y="308" width="0.4450%" height="15" fill="rgb(244,185,38)" fg:x="14015" fg:w="63"/><text x="99.2470%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (63 samples, 0.45%)</title><rect x="98.9970%" y="324" width="0.4450%" height="15" fill="rgb(236,202,9)" fg:x="14015" fg:w="63"/><text x="99.2470%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (63 samples, 0.45%)</title><rect x="98.9970%" y="340" width="0.4450%" height="15" fill="rgb(250,229,37)" fg:x="14015" fg:w="63"/><text x="99.2470%" y="350.50"></text></g><g><title>&lt;module&gt; (arviz/plots/autocorrplot.py:8) (63 samples, 0.45%)</title><rect x="98.9970%" y="356" width="0.4450%" height="15" fill="rgb(206,174,23)" fg:x="14015" fg:w="63"/><text x="99.2470%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (63 samples, 0.45%)</title><rect x="98.9970%" y="372" width="0.4450%" height="15" fill="rgb(211,33,43)" fg:x="14015" fg:w="63"/><text x="99.2470%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (63 samples, 0.45%)</title><rect x="98.9970%" y="388" width="0.4450%" height="15" fill="rgb(245,58,50)" fg:x="14015" fg:w="63"/><text x="99.2470%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (63 samples, 0.45%)</title><rect x="98.9970%" y="404" width="0.4450%" height="15" fill="rgb(244,68,36)" fg:x="14015" fg:w="63"/><text x="99.2470%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (63 samples, 0.45%)</title><rect x="98.9970%" y="420" width="0.4450%" height="15" fill="rgb(232,229,15)" fg:x="14015" fg:w="63"/><text x="99.2470%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (63 samples, 0.45%)</title><rect x="98.9970%" y="436" width="0.4450%" height="15" fill="rgb(254,30,23)" fg:x="14015" fg:w="63"/><text x="99.2470%" y="446.50"></text></g><g><title>&lt;module&gt; (arviz/plots/plot_utils.py:16) (15 samples, 0.11%)</title><rect x="99.3360%" y="452" width="0.1060%" height="15" fill="rgb(235,160,14)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.11%)</title><rect x="99.3360%" y="468" width="0.1060%" height="15" fill="rgb(212,155,44)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1310) (15 samples, 0.11%)</title><rect x="99.3360%" y="484" width="0.1060%" height="15" fill="rgb(226,2,50)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="494.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.11%)</title><rect x="99.3360%" y="500" width="0.1060%" height="15" fill="rgb(234,177,6)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="510.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.11%)</title><rect x="99.3360%" y="516" width="0.1060%" height="15" fill="rgb(217,24,9)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="526.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (15 samples, 0.11%)</title><rect x="99.3360%" y="532" width="0.1060%" height="15" fill="rgb(220,13,46)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="542.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (15 samples, 0.11%)</title><rect x="99.3360%" y="548" width="0.1060%" height="15" fill="rgb(239,221,27)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="558.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (15 samples, 0.11%)</title><rect x="99.3360%" y="564" width="0.1060%" height="15" fill="rgb(222,198,25)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.11%)</title><rect x="99.3360%" y="580" width="0.1060%" height="15" fill="rgb(211,99,13)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="590.50"></text></g><g><title>&lt;module&gt; (arviz/stats/__init__.py:4) (15 samples, 0.11%)</title><rect x="99.3360%" y="596" width="0.1060%" height="15" fill="rgb(232,111,31)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="606.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.11%)</title><rect x="99.3360%" y="612" width="0.1060%" height="15" fill="rgb(245,82,37)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="622.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (15 samples, 0.11%)</title><rect x="99.3360%" y="628" width="0.1060%" height="15" fill="rgb(227,149,46)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="638.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (15 samples, 0.11%)</title><rect x="99.3360%" y="644" width="0.1060%" height="15" fill="rgb(218,36,50)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="654.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (15 samples, 0.11%)</title><rect x="99.3360%" y="660" width="0.1060%" height="15" fill="rgb(226,80,48)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="670.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.11%)</title><rect x="99.3360%" y="676" width="0.1060%" height="15" fill="rgb(238,224,15)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="686.50"></text></g><g><title>&lt;module&gt; (arviz/stats/diagnostics.py:15) (15 samples, 0.11%)</title><rect x="99.3360%" y="692" width="0.1060%" height="15" fill="rgb(241,136,10)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="702.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.11%)</title><rect x="99.3360%" y="708" width="0.1060%" height="15" fill="rgb(208,32,45)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="718.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (15 samples, 0.11%)</title><rect x="99.3360%" y="724" width="0.1060%" height="15" fill="rgb(207,135,9)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="734.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (15 samples, 0.11%)</title><rect x="99.3360%" y="740" width="0.1060%" height="15" fill="rgb(206,86,44)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="750.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (15 samples, 0.11%)</title><rect x="99.3360%" y="756" width="0.1060%" height="15" fill="rgb(245,177,15)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="766.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.11%)</title><rect x="99.3360%" y="772" width="0.1060%" height="15" fill="rgb(206,64,50)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="782.50"></text></g><g><title>&lt;module&gt; (arviz/stats/stats_utils.py:544) (15 samples, 0.11%)</title><rect x="99.3360%" y="788" width="0.1060%" height="15" fill="rgb(234,36,40)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="798.50"></text></g><g><title>conditional_vect (arviz/utils.py:318) (15 samples, 0.11%)</title><rect x="99.3360%" y="804" width="0.1060%" height="15" fill="rgb(213,64,8)" fg:x="14063" fg:w="15"/><text x="99.5860%" y="814.50"></text></g><g><title>&lt;module&gt; (bart_examples.py:3) (155 samples, 1.09%)</title><rect x="98.5520%" y="68" width="1.0949%" height="15" fill="rgb(210,75,36)" fg:x="13952" fg:w="155"/><text x="98.8020%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (155 samples, 1.09%)</title><rect x="98.5520%" y="84" width="1.0949%" height="15" fill="rgb(229,88,21)" fg:x="13952" fg:w="155"/><text x="98.8020%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (155 samples, 1.09%)</title><rect x="98.5520%" y="100" width="1.0949%" height="15" fill="rgb(252,204,47)" fg:x="13952" fg:w="155"/><text x="98.8020%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (155 samples, 1.09%)</title><rect x="98.5520%" y="116" width="1.0949%" height="15" fill="rgb(208,77,27)" fg:x="13952" fg:w="155"/><text x="98.8020%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (155 samples, 1.09%)</title><rect x="98.5520%" y="132" width="1.0949%" height="15" fill="rgb(221,76,26)" fg:x="13952" fg:w="155"/><text x="98.8020%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (155 samples, 1.09%)</title><rect x="98.5520%" y="148" width="1.0949%" height="15" fill="rgb(225,139,18)" fg:x="13952" fg:w="155"/><text x="98.8020%" y="158.50"></text></g><g><title>&lt;module&gt; (arviz/__init__.py:9) (15 samples, 0.11%)</title><rect x="99.5409%" y="164" width="0.1060%" height="15" fill="rgb(230,137,11)" fg:x="14092" fg:w="15"/><text x="99.7909%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.11%)</title><rect x="99.5409%" y="180" width="0.1060%" height="15" fill="rgb(212,28,1)" fg:x="14092" fg:w="15"/><text x="99.7909%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (15 samples, 0.11%)</title><rect x="99.5409%" y="196" width="0.1060%" height="15" fill="rgb(248,164,17)" fg:x="14092" fg:w="15"/><text x="99.7909%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (15 samples, 0.11%)</title><rect x="99.5409%" y="212" width="0.1060%" height="15" fill="rgb(222,171,42)" fg:x="14092" fg:w="15"/><text x="99.7909%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (15 samples, 0.11%)</title><rect x="99.5409%" y="228" width="0.1060%" height="15" fill="rgb(243,84,45)" fg:x="14092" fg:w="15"/><text x="99.7909%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.11%)</title><rect x="99.5409%" y="244" width="0.1060%" height="15" fill="rgb(252,49,23)" fg:x="14092" fg:w="15"/><text x="99.7909%" y="254.50"></text></g><g><title>&lt;module&gt; (pytensor/scalar/__init__.py:1) (20 samples, 0.14%)</title><rect x="99.6468%" y="404" width="0.1413%" height="15" fill="rgb(215,19,7)" fg:x="14107" fg:w="20"/><text x="99.8968%" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (20 samples, 0.14%)</title><rect x="99.6468%" y="420" width="0.1413%" height="15" fill="rgb(238,81,41)" fg:x="14107" fg:w="20"/><text x="99.8968%" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (20 samples, 0.14%)</title><rect x="99.6468%" y="436" width="0.1413%" height="15" fill="rgb(210,199,37)" fg:x="14107" fg:w="20"/><text x="99.8968%" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (20 samples, 0.14%)</title><rect x="99.6468%" y="452" width="0.1413%" height="15" fill="rgb(244,192,49)" fg:x="14107" fg:w="20"/><text x="99.8968%" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (20 samples, 0.14%)</title><rect x="99.6468%" y="468" width="0.1413%" height="15" fill="rgb(226,211,11)" fg:x="14107" fg:w="20"/><text x="99.8968%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (20 samples, 0.14%)</title><rect x="99.6468%" y="484" width="0.1413%" height="15" fill="rgb(236,162,54)" fg:x="14107" fg:w="20"/><text x="99.8968%" y="494.50"></text></g><g><title>&lt;module&gt; (pytensor/__init__.py:119) (29 samples, 0.20%)</title><rect x="99.6468%" y="276" width="0.2048%" height="15" fill="rgb(220,229,9)" fg:x="14107" fg:w="29"/><text x="99.8968%" y="286.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1415) (29 samples, 0.20%)</title><rect x="99.6468%" y="292" width="0.2048%" height="15" fill="rgb(250,87,22)" fg:x="14107" fg:w="29"/><text x="99.8968%" y="302.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (29 samples, 0.20%)</title><rect x="99.6468%" y="308" width="0.2048%" height="15" fill="rgb(239,43,17)" fg:x="14107" fg:w="29"/><text x="99.8968%" y="318.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (29 samples, 0.20%)</title><rect x="99.6468%" y="324" width="0.2048%" height="15" fill="rgb(231,177,25)" fg:x="14107" fg:w="29"/><text x="99.8968%" y="334.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (29 samples, 0.20%)</title><rect x="99.6468%" y="340" width="0.2048%" height="15" fill="rgb(219,179,1)" fg:x="14107" fg:w="29"/><text x="99.8968%" y="350.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (29 samples, 0.20%)</title><rect x="99.6468%" y="356" width="0.2048%" height="15" fill="rgb(238,219,53)" fg:x="14107" fg:w="29"/><text x="99.8968%" y="366.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (29 samples, 0.20%)</title><rect x="99.6468%" y="372" width="0.2048%" height="15" fill="rgb(232,167,36)" fg:x="14107" fg:w="29"/><text x="99.8968%" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (29 samples, 0.20%)</title><rect x="99.6468%" y="388" width="0.2048%" height="15" fill="rgb(244,19,51)" fg:x="14107" fg:w="29"/><text x="99.8968%" y="398.50"></text></g><g><title>&lt;module&gt; (pymc/__init__.py:48) (30 samples, 0.21%)</title><rect x="99.6468%" y="164" width="0.2119%" height="15" fill="rgb(224,6,22)" fg:x="14107" fg:w="30"/><text x="99.8968%" y="174.50"></text></g><g><title>__set_compiler_flags (pymc/__init__.py:31) (30 samples, 0.21%)</title><rect x="99.6468%" y="180" width="0.2119%" height="15" fill="rgb(224,145,5)" fg:x="14107" fg:w="30"/><text x="99.8968%" y="190.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (30 samples, 0.21%)</title><rect x="99.6468%" y="196" width="0.2119%" height="15" fill="rgb(234,130,49)" fg:x="14107" fg:w="30"/><text x="99.8968%" y="206.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (30 samples, 0.21%)</title><rect x="99.6468%" y="212" width="0.2119%" height="15" fill="rgb(254,6,2)" fg:x="14107" fg:w="30"/><text x="99.8968%" y="222.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (30 samples, 0.21%)</title><rect x="99.6468%" y="228" width="0.2119%" height="15" fill="rgb(208,96,46)" fg:x="14107" fg:w="30"/><text x="99.8968%" y="238.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (30 samples, 0.21%)</title><rect x="99.6468%" y="244" width="0.2119%" height="15" fill="rgb(239,3,39)" fg:x="14107" fg:w="30"/><text x="99.8968%" y="254.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (30 samples, 0.21%)</title><rect x="99.6468%" y="260" width="0.2119%" height="15" fill="rgb(233,210,1)" fg:x="14107" fg:w="30"/><text x="99.8968%" y="270.50"></text></g><g><title>&lt;module&gt; (pymc/__init__.py:50) (17 samples, 0.12%)</title><rect x="99.8587%" y="164" width="0.1201%" height="15" fill="rgb(244,137,37)" fg:x="14137" fg:w="17"/><text x="100.1087%" y="174.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1415) (17 samples, 0.12%)</title><rect x="99.8587%" y="180" width="0.1201%" height="15" fill="rgb(240,136,2)" fg:x="14137" fg:w="17"/><text x="100.1087%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (17 samples, 0.12%)</title><rect x="99.8587%" y="196" width="0.1201%" height="15" fill="rgb(239,18,37)" fg:x="14137" fg:w="17"/><text x="100.1087%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (17 samples, 0.12%)</title><rect x="99.8587%" y="212" width="0.1201%" height="15" fill="rgb(218,185,22)" fg:x="14137" fg:w="17"/><text x="100.1087%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (17 samples, 0.12%)</title><rect x="99.8587%" y="228" width="0.1201%" height="15" fill="rgb(225,218,4)" fg:x="14137" fg:w="17"/><text x="100.1087%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (17 samples, 0.12%)</title><rect x="99.8587%" y="244" width="0.1201%" height="15" fill="rgb(230,182,32)" fg:x="14137" fg:w="17"/><text x="100.1087%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (17 samples, 0.12%)</title><rect x="99.8587%" y="260" width="0.1201%" height="15" fill="rgb(242,56,43)" fg:x="14137" fg:w="17"/><text x="100.1087%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (17 samples, 0.12%)</title><rect x="99.8587%" y="276" width="0.1201%" height="15" fill="rgb(233,99,24)" fg:x="14137" fg:w="17"/><text x="100.1087%" y="286.50"></text></g><g><title>all (14,157 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="14157"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (bart_examples.py:7) (50 samples, 0.35%)</title><rect x="99.6468%" y="68" width="0.3532%" height="15" fill="rgb(227,7,12)" fg:x="14107" fg:w="50"/><text x="99.8968%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (50 samples, 0.35%)</title><rect x="99.6468%" y="84" width="0.3532%" height="15" fill="rgb(245,203,43)" fg:x="14107" fg:w="50"/><text x="99.8968%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (50 samples, 0.35%)</title><rect x="99.6468%" y="100" width="0.3532%" height="15" fill="rgb(238,205,33)" fg:x="14107" fg:w="50"/><text x="99.8968%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (50 samples, 0.35%)</title><rect x="99.6468%" y="116" width="0.3532%" height="15" fill="rgb(231,56,7)" fg:x="14107" fg:w="50"/><text x="99.8968%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (50 samples, 0.35%)</title><rect x="99.6468%" y="132" width="0.3532%" height="15" fill="rgb(244,186,29)" fg:x="14107" fg:w="50"/><text x="99.8968%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (50 samples, 0.35%)</title><rect x="99.6468%" y="148" width="0.3532%" height="15" fill="rgb(234,111,31)" fg:x="14107" fg:w="50"/><text x="99.8968%" y="158.50"></text></g></svg></svg>